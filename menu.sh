#!/bin/bash

# AUTOINSTALADOR: Instala el script en PATH si a√∫n no lo est√°
SCRIPT_NAME="menu"
TARGET_PATH="/usr/local/bin/$SCRIPT_NAME"
USER_PATH="$HOME/bin/$SCRIPT_NAME"

# Detectar si ya est√° en el PATH y no se ejecuta como menu
if [[ "$(basename "$0")" != "$SCRIPT_NAME" ]]; then
  if ! command -v $SCRIPT_NAME &> /dev/null; then
    echo "üõ†Ô∏è Instalando '$SCRIPT_NAME' para acceso global..."

    if [ "$EUID" -eq 0 ]; then
      cp "$0" "$TARGET_PATH"
      chmod +x "$TARGET_PATH"
      echo "‚úÖ Instalado en $TARGET_PATH"
    else
      mkdir -p "$HOME/bin"
      cp "$0" "$USER_PATH"
      chmod +x "$USER_PATH"

	if [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
	echo 'export PATH="$HOME/bin:$PATH"' >> "$HOME/.bashrc"
	export PATH="$HOME/bin:$PATH"
	echo "üìå Se agreg√≥ ~/bin al PATH en .bashrc"
	source "$HOME/.bashrc"
	echo "üîÑ Se recarg√≥ .bashrc para aplicar los cambios"
	fi

      echo "‚úÖ Instalado en $USER_PATH"
    fi

    echo "‚ÑπÔ∏è A partir de ahora puedes usar el script simplemente con el comando: $SCRIPT_NAME"
    echo "Presiona Enter para continuar..."
    read
  fi
fi

case "$1" in
  -h|--help)
    echo "Menu de opciones Grupo #5"
    echo "Uso: ./menu.sh [opci√≥n]"
    echo ""
    echo "Opciones:"
    echo "  -h, --help       Muestra esta ayuda."
    echo "  -V, --version    Muestra la versi√≥n del script."
    echo ""
    echo "Este script presenta un men√∫ interactivo con comandos comunes de Linux."
    exit 0
    ;;
  -V|--version)
    echo "menu.sh - versi√≥n 1.0"
    exit 0
    ;;
esac

menu_interactivo() {
	while true; do
		clear 
		echo "----------------------------------------"
		echo " MENU INTERACTIVO LINUX "
		echo "----------------------------------------"
		echo "1. Mostrar contenido de un archivo"
		echo "2. Buscar texto en un archivo"
		echo "3. Ver las primeras l√≠neas de un archivo"
		echo "4. Ver las √∫ltimas l√≠neas de un archivo"
		echo "5. Comparar dos archivos"
		echo "6. Crear un archivo nuevo"
		echo "7. Salir"
		echo "----------------------------------------"
		read -p "Selecciona una opci√≥n: " opcion 

		case $opcion in 
			1) 
				read -p "Nombre del archivo a mostrar: " archivo
				cat "$archivo"
				read -p "Presiona Enter para continuar..." ;;
				
			2)
				read -p "Nombre del archivo: " archivo
				read -p "Texto a buscar: " texto
				grep "$texto" "$archivo"
				read -p "Presiona Enter para continuar..." ;;

			3) 
				read -p "Nombre del archivo: " archivo 
				read -p "¬øCu√°ntas l√≠neas quieres ver?: " num 
				head -n "$num" "$archivo"
				read -p "Presiona Enter para continuar..." ;;

			4) 	
				read -p "Nombre del archivo: " archivo 
				read -p "¬øCu√°ntas l√≠neas quieres ver?: " num 
				tail -n "$num" "$archivo" 
				read -p "Presiona Enter para continuar..." ;;

			5) 
				read -p "Nombre del primer archivo: " archivo1
				read -p "Nombre del segundo archivo: " archivo2
				diff "$archivo1" "$archivo2"
				read -p "Presiona Enter para continuar..." ;;

			6) 
				read -p "Nombre del nuevo archivo: " nuevo_archivo
				touch "$nuevo_archivo"
				echo "Archivo '$nuevo_archivo' creado exitosamente."
				read -p "Presiona Enter para continuar..." ;;

			7)
				echo "Saliendo del men√∫..."
				break ;;

			*)
				echo "Opci√≥n inv√°lida, intenta de nuevo."
				read -p "Presiona Enter para continuar..." ;;
		esac
	done
}

opcion=1
while [ "$opcion" != "0" ]; do
	clear
	echo "MENU SCRIPT V.1"
	echo "1. Busqueda de texto"
	echo "2. Busqueda de archivos FIND"
	echo "3. Redirecciones y Salidas"
	echo "4. Uso de Joins"
	echo "5. Expresiones regulares"
	echo "6. Funciones built-in y comandos comunes"
	echo "0. Salir"
	echo -n "Escoger opci√≥n: "
	read opcion

	case $opcion in
    1) 
		echo "Opcion 1 - Busqueda de texto Tryshel Leiva"  
		menu_interactivo
		;;
    2) echo "Opcion 2" ;;
    3) echo "Opcion 3" ;;
    4) echo "Opcion 4" ;;
    5)
		echo -e "\nüìå Ejemplos de uso de expresiones regulares en Linux:\n"

		echo "1. Buscar l√≠neas que comienzan con 'Error' en un archivo:"
		echo "   grep '^Error' archivo.log"
		echo ""

		echo "2. Buscar l√≠neas que terminan con '.conf' en un archivo:"
		echo "   grep '\.conf$' archivo.txt"
		echo ""

		echo "3. Reemplazar n√∫meros de tel√©fono por 'XXX-XXX-XXXX' en un archivo:"
		echo "   sed -E 's/[0-9]{3}-[0-9]{3}-[0-9]{4}/XXX-XXX-XXXX/g' archivo.txt"
		echo ""

		echo "4. Validar si una cadena es un n√∫mero entero:"
		read -p '   Ingrese un n√∫mero: ' numero
		if [[ $numero =~ ^[0-9]+$ ]]; then
			echo '   ‚úÖ Es un n√∫mero entero v√°lido.'
		else
			echo '   ‚ùå No es un n√∫mero entero v√°lido.'
		fi
		echo ""

		echo "5. Validar formato de correo electr√≥nico:"
		read -p '   Ingrese un correo electr√≥nico: ' email
		if [[ $email =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
			echo '   ‚úÖ Correo electr√≥nico v√°lido.'
		else
			echo '   ‚ùå Correo electr√≥nico inv√°lido.'
		fi
		echo ""
		;;
	6)
		echo -e "\n2.2 Comando: Built-in Function - Estudiante: Jefferson Palma"
		echo -e "\nDescripci√≥n:"
		echo "Las funciones built-in son comandos integrados en Bash que permiten automatizar tareas sin llamar procesos externos."

		read -p $'\nPresiona Enter para continuar con la demostraci√≥n paso a paso...'

		echo -e "\nüìå Paso 1: Definir una funci√≥n saludo personalizada"
		read -p "Ingrese su nombre: " nombre
		saludo() {
			echo "Hola $1, bienvenido al mundo Bash!"
		}
		saludo "$nombre"

		read -p $'\nPresiona Enter para declarar una variable de tipo entero...'
		read -p "¬øCu√°l es tu edad? " edad_usuario
		declare -i edad=$edad_usuario
		echo "Has declarado la edad como entero. Edad = $edad"

		read -p $'\nPresiona Enter para declarar una constante...'
		declare -r VERSION="v1.0"
		echo "Se ha declarado una constante: VERSION = $VERSION"

		read -p $'\n¬øQuieres ver el tipo de la funci√≥n saludo con el comando type? [s/n]: ' confirm_type
		if [[ "$confirm_type" =~ ^[sS]$ ]]; then
			type saludo
		fi
		read -p $'\n¬øTe gustaria ver tambien el de la funcion de busqueda de texto (Opcion 1)? [s/n]: ' confirm_type
		if [[ "$confirm_type" =~ ^[sS]$ ]]; then
			type menu_interactivo
		fi

		read -p $'\nPresiona Enter para mostrar la informaci√≥n del sistema con uname...'
		uname -a

		read -p $'\n¬øDeseas ejecutar un comando con eval (ls -l)? [s/n]: ' confirm_eval
		if [[ "$confirm_eval" =~ ^[sS]$ ]]; then
			comando="ls -l"
			eval $comando
		else
			echo "‚è≠Ô∏è Saltando eval..."
		fi

		read -p $'\nAhora vamos a ordenar frutas. Presiona Enter para continuar...'
		echo -e "manzana\npera\nbanana" > frutas.txt
		sort frutas.txt

		read -p $'\n¬øQuieres contar las l√≠neas del archivo frutas.txt? [s/n]: ' confirm_wc
		if [[ "$confirm_wc" =~ ^[sS]$ ]]; then
			wc -l frutas.txt
		else
			echo "‚è≠Ô∏è Saltando wc..."
		fi

		echo -e "\n7. Comentamos el uso de exec para evitar reemplazar el proceso del menu:"
		echo "# exec ls -l"
		echo "‚ö†Ô∏è El comando 'exec' reemplaza el script actual por otro proceso."
		echo "   Si ejecut√°ramos: exec ls -l"
		echo "   Entonces el men√∫ dejar√≠a de funcionar y solo ver√≠as el resultado de ls -l."

		read -p $'\n¬øQuieres eliminar el archivo frutas.txt ahora? [s/n]: ' confirm_rm
		if [[ "$confirm_rm" =~ ^[sS]$ ]]; then
			rm frutas.txt
			echo "üßπ Archivo eliminado."
		else
			echo "üìÅ Archivo conservado como frutas.txt"
		fi
		;;
    0) echo "Saliendo..." ;;
    *) echo "Opcion no valida" ;;
	esac

	echo -e "\nPresiona Enter para continuar..."
	read
done
